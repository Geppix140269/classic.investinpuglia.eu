// classic.investinpuglia.eu/script.js
// Configuration
const SUPABASE_URL = 'https://kjyobkrjcmiuusijvrme.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtqeW9ia3JqY21pdXVzaWp2cm1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA5NDM5NzMsImV4cCI6MjA2NjUxOTk3M30.2GxAUtXPal7ufxg7KgWMO7h15RXJOolBWt0-NPygj2I';
const EMAILJS_SERVICE_ID = 'service_w6tghqr';
const EMAILJS_TEMPLATE_ID = 'template_vztws4q';
const EMAILJS_PUBLIC_KEY = 'wKn1_xMCtZssdZzpb';

// Firebase Configuration
const FIREBASE_CONFIG = {
  apiKey: "AIzaSyD5W53Mh-RqugrgyaALsf4ERPKHNiEF4BM",
  authDomain: "invest-in-puglia-eu.firebaseapp.com",
  projectId: "invest-in-puglia-eu",
  storageBucket: "invest-in-puglia-eu.firebasestorage.app",
  messagingSenderId: "515852973978",
  appId: "1:515852973978:web:68df8862710f0b89df5423"
};

// Initialize services
let supabase;
let calculationResults = {};
let currentUser = null;
let dynamicConfig = null;

// Helper function
function getConfigValue(path, defaultValue) {
  if (!dynamicConfig) return defaultValue;
  try {
    const keys = path.split('.');
    let value = dynamicConfig;
    for (const key of keys) {
      value = value[key];
    }
    return value !== undefined ? value : defaultValue;
  } catch {
    return defaultValue;
  }
}

window.addEventListener('load', async function() {
  // Initialize Firebase
  if (typeof firebase !== 'undefined') {
    firebase.initializeApp(FIREBASE_CONFIG);
    const auth = firebase.auth();
    
    auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);
    
    auth.onAuthStateChanged(async (user) => {
      if (user) {
        console.log('User authenticated:', user.email);
        currentUser = user;
        localStorage.setItem('investiscope_user_email', user.email);
        localStorage.setItem('investiscope_access_token', 'firebase_auth');
        initializeCalculator();
      } else {
        console.log('No authenticated user, redirecting...');
        window.location.href = 'https://investinpuglia.eu/login?redirect=' + encodeURIComponent(window.location.href);
      }
    });
  } else {
    console.error('Firebase not loaded!');
    alert('Authentication system not loaded. Please refresh.');
  }
});

function initializeCalculator() {
  if (window.supabase && window.supabase.createClient) {
    supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    console.log('Supabase initialized');
  }
  if (window.emailjs) {
    window.emailjs.init(EMAILJS_PUBLIC_KEY);
    console.log('EmailJS initialized');
  }
  loadDynamicConfig();
}


// Load dynamic configuration (but don't break if it fails)
  fetch('https://investinpuglia.eu/api/calculator/config')
    .then(response => response.json())
    .then(config => {
      if (config) {
        console.log('Loaded dynamic config from Sanity');
        dynamicConfig = config;
        // Update sliders with dynamic min/max values
        updateSliderRanges();
      }
    })
    .catch(err => {
      console.log('Using default config values');
    });
  
  // Initialize calculations
  updateCalculations();
});

// Constants - Use dynamic values if available
const DESIGN_PM_RATE = 0.06;
const PRELIMINARY_STUDIES_RATE = 0.015;
const MIN_INTEGRATED_PERCENT = 0.05;
const REGISTRATION_TAX_RATE = 0.09;

// Get user data
const userData = JSON.parse(localStorage.getItem('investiscope_user_data') || '{}');

// Input elements
const inputs = {
  propertyPurchase: document.getElementById('propertyPurchaseInput'),
  restructuring: document.getElementById('restructuringInput'),
  fixtures: document.getElementById('fixturesInput'),
  innovation: document.getElementById('innovationInput'),
  environmental: document.getElementById('environmentalInput'),
  grantRate: document.getElementById('grantRateInput'),
  agencyFees: document.getElementById('agencyFeesInput'),
  notaryFees: document.getElementById('notaryFeesInput'),
  consultingFees: document.getElementById('consultingFeesInput')
};

// Display elements
const displays = {
  propertyPurchase: document.getElementById('propertyPurchaseValue'),
  restructuring: document.getElementById('restructuringValue'),
  fixtures: document.getElementById('fixturesValue'),
  innovation: document.getElementById('innovationValue'),
  environmental: document.getElementById('environmentalValue'),
  designPm: document.getElementById('designPmValue'),
  preliminaryStudies: document.getElementById('preliminaryStudiesValue'),
  grantRate: document.getElementById('grantRateValue'),
  integratedTotal: document.getElementById('integratedTotal'),
  integratedPercent: document.getElementById('integratedPercent'),
  integratedStatus: document.getElementById('integratedStatus'),
  totalEligible: document.getElementById('totalEligibleDisplay'),
  miniPiaGrant: document.getElementById('miniPiaGrantDisplay'),
  taxCredit: document.getElementById('taxCreditDisplay'),
  totalBenefit: document.getElementById('totalBenefitDisplay'),
  agencyFees: document.getElementById('agencyFeesValue'),
  agencyRate: document.getElementById('agencyRateDisplay'),
  registrationTax: document.getElementById('registrationTaxValue'),
  notaryFees: document.getElementById('notaryFeesValue'),
  consultingFees: document.getElementById('consultingFeesValue'),
  totalNonEligible: document.getElementById('totalNonEligibleDisplay'),
  totalProject: document.getElementById('totalProjectDisplay'),
  netInvestment: document.getElementById('netInvestmentDisplay')
};

// Add event listeners
Object.values(inputs).forEach(input => {
  if (input) {
    input.addEventListener('input', updateCalculations);
  }
});

// Professional costs checkboxes
document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
  checkbox.addEventListener('change', updateCalculations);
});

// Update slider ranges with dynamic config
function updateSliderRanges() {
  if (dynamicConfig) {
    // Property Purchase
    if (inputs.propertyPurchase) {
      inputs.propertyPurchase.min = getConfigValue('parameters.propertyValue.min', 100000);
      inputs.propertyPurchase.max = getConfigValue('parameters.propertyValue.max', 3000000);
      inputs.propertyPurchase.step = getConfigValue('parameters.propertyValue.step', 10000);
    }
    
    // Restructuring
    if (inputs.restructuring) {
      inputs.restructuring.min = getConfigValue('parameters.renovationBudget.min', 50000);
      inputs.restructuring.max = getConfigValue('parameters.renovationBudget.max', 2000000);
      inputs.restructuring.step = getConfigValue('parameters.renovationBudget.step', 10000);
    }
  }
}

function formatCurrency(value) {
  return 'â‚¬' + Math.round(value).toLocaleString('en-US');
}

function updateCalculations() {
  // Get input values
  const propertyPurchase = parseFloat(inputs.propertyPurchase.value);
  const restructuring = parseFloat(inputs.restructuring.value);
  const fixtures = parseFloat(inputs.fixtures.value);
  const innovation = parseFloat(inputs.innovation.value);
  const environmental = parseFloat(inputs.environmental.value);
  const grantRate = parseFloat(inputs.grantRate.value) / 100;
  const agencyRate = parseFloat(inputs.agencyFees.value) / 100;
  
  // Update display values
  displays.propertyPurchase.textContent = formatCurrency(propertyPurchase);
  displays.restructuring.textContent = formatCurrency(restructuring);
  displays.fixtures.textContent = formatCurrency(fixtures);
  displays.innovation.textContent = formatCurrency(innovation);
  displays.environmental.textContent = formatCurrency(environmental);
  displays.grantRate.textContent = Math.round(grantRate * 100) + '%';
  
  // Calculate civil works
  const civilWorks = propertyPurchase + restructuring;
  
  // Calculate Design & PM (use dynamic rate)
  const designPmRate = getConfigValue('parameters.costs.designAndPM.percent', 6) / 100;
  const designPm = restructuring * designPmRate;
  displays.designPm.textContent = formatCurrency(designPm);
  
  // Update design PM note
  document.getElementById('designPmNote').textContent = 
    (designPmRate * 100) + '% Ã— ' + formatCurrency(restructuring) + ' (renovations) = ' + formatCurrency(designPm);
  
  // Calculate integrated components
  const integratedTotal = innovation + environmental;
  displays.integratedTotal.textContent = formatCurrency(integratedTotal);
  
  // Calculate preliminary total (before preliminary studies)
  const preliminaryTotal = propertyPurchase + restructuring + fixtures + 
                         innovation + environmental + designPm;
  
  // Calculate preliminary studies (use dynamic rate)
  const preliminaryRate = getConfigValue('parameters.costs.preliminaryStudies.percent', 1.5) / 100;
  const preliminaryStudies = (preliminaryTotal * preliminaryRate) / 
                           (1 - preliminaryRate);
  displays.preliminaryStudies.textContent = formatCurrency(preliminaryStudies);
  
  // Calculate total eligible
  const totalEligible = preliminaryTotal + preliminaryStudies;
  displays.totalEligible.textContent = formatCurrency(totalEligible);
  
  // Calculate integrated percentage
  const integratedPercent = (integratedTotal / totalEligible) * 100;
  displays.integratedPercent.textContent = integratedPercent.toFixed(1) + '%';
  
  // Update integrated components status (use dynamic minimum if available)
  const minIntegrated = getConfigValue('parameters.components.innovation.minPercent', 2) + 
                       getConfigValue('parameters.components.sustainability.minPercent', 2);
  if (integratedPercent >= minIntegrated) {
    displays.integratedStatus.innerHTML = 'âœ“ Meets minimum ' + minIntegrated + '% requirement';
    displays.integratedStatus.style.color = '#059669';
  } else {
    displays.integratedStatus.innerHTML = 'âœ— Below minimum ' + minIntegrated + '% requirement';
    displays.integratedStatus.style.color = '#dc2626';
  }
  
  // Calculate grant and tax credit
  const miniPiaGrant = totalEligible * grantRate;
  const taxCredit = totalEligible * 0.15; // 15% tax credit
  const totalBenefit = miniPiaGrant + taxCredit;
  
  // Update displays with proper rounding
  displays.miniPiaGrant.textContent = formatCurrency(miniPiaGrant);
  displays.taxCredit.textContent = formatCurrency(taxCredit);
  displays.totalBenefit.textContent = formatCurrency(totalBenefit);
  
  // Calculate non-eligible costs
  const agencyFees = propertyPurchase * agencyRate;
  const registrationTax = propertyPurchase * REGISTRATION_TAX_RATE;
  const notaryFeesBase = parseFloat(inputs.notaryFees.value);
  const consultingFees = parseFloat(inputs.consultingFees.value);
  
  displays.agencyFees.textContent = formatCurrency(agencyFees);
  displays.agencyRate.textContent = (agencyRate * 100).toFixed(1) + '%';
  displays.registrationTax.textContent = formatCurrency(registrationTax);
  displays.notaryFees.textContent = formatCurrency(notaryFeesBase);
  displays.consultingFees.textContent = formatCurrency(consultingFees);
  
  const totalNonEligible = agencyFees + registrationTax + notaryFeesBase + consultingFees;
  displays.totalNonEligible.textContent = formatCurrency(totalNonEligible);
  
  // Calculate professional costs
  calculateProfessionalCosts(propertyPurchase, restructuring);
  
  // Calculate total project and net investment
  const totalProject = totalEligible + totalNonEligible;
  const netInvestment = totalProject - totalBenefit;
  
  displays.totalProject.textContent = formatCurrency(totalProject);
  displays.netInvestment.textContent = formatCurrency(netInvestment);
  
  // Update suggested percentages dynamically
  const suggestedFixtures = civilWorks * 0.125;
  document.getElementById('fixturesSuggestion').textContent = 
    'Suggested: 12.5% of civil works (' + formatCurrency(suggestedFixtures) + ')';
  
  const suggestedInnovation = civilWorks * 0.035;
  document.getElementById('innovationSuggestion').textContent = 
    'Suggested: 3-4% of civil works (' + formatCurrency(suggestedInnovation) + ')';
  
  const suggestedEnvironmental = civilWorks * 0.025;
  document.getElementById('environmentalSuggestion').textContent = 
    'Suggested: 2-3% of civil works (' + formatCurrency(suggestedEnvironmental) + ')';
  
  // Store results for form submission
  calculationResults = {
    propertyPurchase,
    restructuring,
    fixtures,
    innovation,
    environmental,
    designPm,
    preliminaryStudies,
    totalEligible,
    miniPiaGrant,
    taxCredit,
    totalBenefit,
    totalNonEligible,
    totalProject,
    netInvestment,
    integratedPercent,
    agencyFees,
    registrationTax,
    notaryFees: notaryFeesBase,
    consultingFees
  };
  
  // Update preview values if modal is open
  if (document.getElementById('registrationOverlay').style.display === 'block') {
    updatePreviewValues();
  }
}

function calculateProfessionalCosts(propertyPrice, renovationBudget) {
  let total = 0;
  
  // Notary fees
  if (document.getElementById('cost-notaryFees').checked) {
    const cost = Math.min(Math.max(propertyPrice * 0.02, 1500), 15000);
    document.getElementById('value-notaryFees').textContent = formatCurrency(cost);
    total += cost;
  } else {
    document.getElementById('value-notaryFees').textContent = 'â‚¬0';
  }
  
  // Legal fees
  if (document.getElementById('cost-legalFees').checked) {
    const cost = Math.min(Math.max(propertyPrice * 0.015, 2000), 10000);
    document.getElementById('value-legalFees').textContent = formatCurrency(cost);
    total += cost;
  } else {
    document.getElementById('value-legalFees').textContent = 'â‚¬0';
  }
  
  // Architect fees
  if (document.getElementById('cost-architectFees').checked) {
    const cost = Math.max(renovationBudget * 0.08, 5000);
    document.getElementById('value-architectFees').textContent = formatCurrency(cost);
    total += cost;
  } else {
    document.getElementById('value-architectFees').textContent = 'â‚¬0';
  }
  
  // Permits
  if (document.getElementById('cost-permitCosts').checked) {
    const cost = 5000;
    document.getElementById('value-permitCosts').textContent = formatCurrency(cost);
    total += cost;
  } else {
    document.getElementById('value-permitCosts').textContent = 'â‚¬0';
  }
  
  // Project management
  if (document.getElementById('cost-projectManagement').checked) {
    const cost = Math.max(renovationBudget * 0.05, 5000);
    document.getElementById('value-projectManagement').textContent = formatCurrency(cost);
    total += cost;
  } else {
    document.getElementById('value-projectManagement').textContent = 'â‚¬0';
  }
  
  document.getElementById('total-professional-costs').textContent = formatCurrency(total);
  calculationResults.professionalCosts = total;
}

// Show registration modal
window.showRegistrationModal = function() {
  document.getElementById('registrationOverlay').style.display = 'block';
  document.body.style.overflow = 'hidden';
  updatePreviewValues();
}

// Close modal
window.closeModal = function() {
  document.getElementById('registrationOverlay').style.display = 'none';
  document.body.style.overflow = 'auto';
}

// Update preview values
function updatePreviewValues() {
  if (calculationResults.miniPiaGrant) {
    document.getElementById('previewGrant').textContent = formatCurrency(calculationResults.miniPiaGrant);
    document.getElementById('previewBenefit').textContent = formatCurrency(calculationResults.totalBenefit);
    document.getElementById('previewNet').textContent = formatCurrency(calculationResults.netInvestment);
    document.getElementById('previewTotal').textContent = formatCurrency(calculationResults.totalProject);
  }
}

// Send email report
async function sendEmailReport(name, email, phone, location, timeline, results) {
  console.log('Sending email to:', email);
  
  const grantRate = ((results.miniPiaGrant / results.totalEligible) * 100).toFixed(0);
  
  // Prepare template parameters
  const templateParams = {
    // Personal info
    name: name,
    to_email: email,
    email: email,
    user_email: email,
    phone: phone || 'Not provided',
    location: location || 'Not specified',
    timeline: timeline || 'Not specified',
    
    // Investment Overview
    total_project_value: formatCurrency(results.totalProject),
    mini_pia_grant: formatCurrency(results.miniPiaGrant),
    grant_rate: grantRate,
    net_investment: formatCurrency(results.netInvestment),
    total_benefit: formatCurrency(results.totalBenefit),
    
    // Project Cost Breakdown
    property_purchase: formatCurrency(results.propertyPurchase),
    restructuring: formatCurrency(results.restructuring),
    equipment: formatCurrency(results.fixtures),
    innovation: formatCurrency(results.innovation),
    environmental: formatCurrency(results.environmental),
    design_pm: formatCurrency(results.designPm),
    preliminary_studies: formatCurrency(results.preliminaryStudies),
    investment_base: formatCurrency(results.totalEligible),
    
    // Non-Eligible Costs
    agency_fees: formatCurrency(results.agencyFees),
    registration_tax: formatCurrency(results.registrationTax),
    notary_legal: formatCurrency(results.notaryFees),
    consulting_fees: formatCurrency(results.consultingFees),
    total_professional: formatCurrency(results.totalNonEligible),
    
    // Additional details
    integrated_percent: results.integratedPercent.toFixed(1),
    tax_credit: formatCurrency(results.taxCredit),
    
    // Meta
    date: new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
  };
  
  console.log('Email template parameters:', templateParams);
  
  try {
    const response = await window.emailjs.send(EMAILJS_SERVICE_ID, EMAILJS_TEMPLATE_ID, templateParams);
    console.log('Email sent successfully:', response);
    return response;
  } catch (error) {
    console.error('Email sending failed:', error);
    throw error;
  }
}

// Generate PDF Report
function generatePDFReport(data) {
  // Check if jsPDF is loaded
  if (!window.jspdf || !window.jspdf.jsPDF) {
    console.error('jsPDF library not loaded');
    throw new Error('PDF library not available');
  }
  
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();
  
  // Colors
  const primaryGreen = [16, 185, 129];
  const darkBlue = [30, 41, 59];
  const lightGray = [243, 244, 246];
  const white = [255, 255, 255];
  
  let yPos = 20;
  
  // Page 1 - Cover Page
  // Background
  doc.setFillColor(...darkBlue);
  doc.rect(0, 0, 210, 297, 'F');
  
  // Logo area
  doc.setFillColor(...primaryGreen);
  doc.rect(0, 40, 210, 80, 'F');
  
  // Title
  doc.setTextColor(...white);
  doc.setFontSize(36);
  doc.setFont('helvetica', 'bold');
  doc.text('InvestiScopeâ„¢', 105, 70, { align: 'center' });
  
  doc.setFontSize(18);
  doc.setFont('helvetica', 'normal');
  doc.text('Professional Investment Analysis Report', 105, 85, { align: 'center' });
  doc.text('Mini PIA Turismo Grant Calculator', 105, 95, { align: 'center' });
  
  // Client Info Box
  doc.setFillColor(...white);
  doc.roundedRect(30, 140, 150, 60, 5, 5, 'F');
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Prepared for:', 40, 155);
  
  doc.setFontSize(16);
  doc.text(data.name || 'Valued Investor', 40, 165);
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.text(data.email || '', 40, 173);
  if (data.location) {
    doc.text('Property Location: ' + data.location, 40, 181);
  }
  doc.text('Report Date: ' + new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }), 40, 189);
  
  // Key Highlights Box
  doc.setFillColor(...primaryGreen);
  doc.rect(0, 220, 210, 60, 'F');
  
  doc.setTextColor(...white);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Your Investment Opportunity', 105, 240, { align: 'center' });
  
  doc.setFontSize(28);
  doc.text('â‚¬' + Math.round(data.miniPiaGrant).toLocaleString(), 105, 255, { align: 'center' });
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text('in Mini PIA Turismo Grants Available', 105, 265, { align: 'center' });
  
  // Page 2 - Executive Summary
  doc.addPage();
  doc.setFillColor(...white);
  doc.rect(0, 0, 210, 297, 'F');
  
  // Header
  doc.setFillColor(...primaryGreen);
  doc.rect(0, 0, 210, 30, 'F');
  doc.setTextColor(...white);
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text('Executive Summary', 105, 20, { align: 'center' });
  
  yPos = 50;
  
  // Summary boxes
  const summaryData = [
    { label: 'Total Project Investment', value: data.totalProject, color: darkBlue },
    { label: 'Mini PIA Grant (45%)', value: data.miniPiaGrant, color: primaryGreen },
    { label: 'Tax Credit (15%)', value: data.taxCredit, color: [96, 165, 250] },
    { label: 'Your Net Investment', value: data.netInvestment, color: [34, 197, 94] }
  ];
  
  summaryData.forEach((item, index) => {
    const boxY = yPos + (index * 35);
    
    // Box
    doc.setFillColor(...lightGray);
    doc.roundedRect(20, boxY, 170, 30, 3, 3, 'F');
    
    // Colored accent
    doc.setFillColor(...item.color);
    doc.rect(20, boxY, 5, 30, 'F');
    
    // Text
    doc.setTextColor(...darkBlue);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text(item.label, 30, boxY + 12);
    
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('â‚¬' + Math.round(item.value).toLocaleString(), 180, boxY + 20, { align: 'right' });
  });
  
  yPos = 190;
  
  // Key Benefits Section
  doc.setFillColor(...darkBlue);
  doc.rect(20, yPos, 170, 8, 'F');
  doc.setTextColor(...white);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Key Investment Benefits', 105, yPos + 6, { align: 'center' });
  
  yPos += 20;
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  const benefits = [
    'âœ“ ' + ((data.miniPiaGrant / data.totalEligible * 100).toFixed(0)) + '% non-refundable grant on eligible costs',
    'âœ“ Additional 15% tax credit on all eligible expenses',
    'âœ“ Total benefit of â‚¬' + Math.round(data.miniPiaGrant + data.taxCredit).toLocaleString(),
    'âœ“ Integrated components at ' + data.integratedPercent.toFixed(1) + '% (exceeds 5% minimum)',
    'âœ“ Professional support for grant application process'
  ];
  
  benefits.forEach(benefit => {
    doc.text(benefit, 25, yPos);
    yPos += 8;
  });
  
  // Page 3 - Detailed Cost Breakdown
  doc.addPage();
  
  // Header
  doc.setFillColor(...primaryGreen);
  doc.rect(0, 0, 210, 30, 'F');
  doc.setTextColor(...white);
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text('Detailed Cost Analysis', 105, 20, { align: 'center' });
  
  yPos = 45;
  
  // Eligible Costs Section
  doc.setFillColor(...primaryGreen);
  doc.setTextColor(...white);
  doc.rect(20, yPos, 170, 10, 'F');
  doc.setFontSize(14);
  doc.text('ELIGIBLE COSTS (Qualify for Mini PIA)', 105, yPos + 7, { align: 'center' });
  
  yPos += 15;
  
  // Eligible costs table
  const eligibleCosts = [
    { item: 'Property Purchase', amount: data.propertyPurchase, note: '100% eligible' },
    { item: 'Restructuring & Renovations', amount: data.restructuring, note: '100% eligible' },
    { item: 'Fixtures & Fittings', amount: data.fixtures, note: 'Equipment and furniture' },
    { item: 'Innovation Component', amount: data.innovation, note: 'Digital systems & technology' },
    { item: 'Environmental Protection', amount: data.environmental, note: 'Energy efficiency measures' },
    { item: 'Design & Project Management', amount: data.designPm, note: '6% of renovation costs' },
    { item: 'Preliminary Studies', amount: data.preliminaryStudies, note: '1.5% of total eligible' }
  ];
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(11);
  
  eligibleCosts.forEach(cost => {
    doc.setFont('helvetica', 'normal');
    doc.text(cost.item, 25, yPos);
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);
    doc.text(cost.note, 25, yPos + 4);
    doc.setTextColor(...darkBlue);
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    doc.text('â‚¬' + Math.round(cost.amount).toLocaleString(), 180, yPos, { align: 'right' });
    yPos += 12;
  });
  
  // Total Eligible
  doc.setDrawColor(...primaryGreen);
  doc.setLineWidth(0.5);
  doc.line(25, yPos - 3, 185, yPos - 3);
  doc.setFontSize(13);
  doc.setFont('helvetica', 'bold');
  doc.text('Total Eligible Costs', 25, yPos + 5);
  doc.setTextColor(...primaryGreen);
  doc.text('â‚¬' + Math.round(data.totalEligible).toLocaleString(), 180, yPos + 5, { align: 'right' });
  
  yPos += 20;
  
  // Non-Eligible Costs Section
  doc.setFillColor(239, 68, 68);
  doc.setTextColor(...white);
  doc.rect(20, yPos, 170, 10, 'F');
  doc.setFontSize(14);
  doc.text('NON-ELIGIBLE COSTS', 105, yPos + 7, { align: 'center' });
  
  yPos += 15;
  
  const nonEligibleCosts = [
    { item: 'Agency Fees', amount: data.agencyFees, note: '3% of property value' },
    { item: 'Registration Tax', amount: data.registrationTax, note: '9% of purchase price' },
    { item: 'Notary & Legal Fees', amount: data.notaryFees, note: 'Property transfer costs' },
    { item: 'Consulting Fees', amount: data.consultingFees, note: 'Grant application support' }
  ];
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(11);
  
  nonEligibleCosts.forEach(cost => {
    doc.setFont('helvetica', 'normal');
    doc.text(cost.item, 25, yPos);
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);
    doc.text(cost.note, 25, yPos + 4);
    doc.setTextColor(...darkBlue);
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    doc.text('â‚¬' + Math.round(cost.amount).toLocaleString(), 180, yPos, { align: 'right' });
    yPos += 12;
  });
  
  // Total Non-Eligible
  doc.setDrawColor(239, 68, 68);
  doc.setLineWidth(0.5);
  doc.line(25, yPos - 3, 185, yPos - 3);
  doc.setFontSize(13);
  doc.setFont('helvetica', 'bold');
  doc.text('Total Non-Eligible Costs', 25, yPos + 5);
  doc.setTextColor(239, 68, 68);
  doc.text('â‚¬' + Math.round(data.totalNonEligible).toLocaleString(), 180, yPos + 5, { align: 'right' });
  
  // Page 4 - Grant Calculation Details
  doc.addPage();
  
  // Header
  doc.setFillColor(...primaryGreen);
  doc.rect(0, 0, 210, 30, 'F');
  doc.setTextColor(...white);
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text('Mini PIA Grant Calculation', 105, 20, { align: 'center' });
  
  yPos = 50;
  
  // Grant Breakdown Box
  doc.setFillColor(240, 253, 244);
  doc.roundedRect(20, yPos, 170, 100, 5, 5, 'F');
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Grant Calculation', 30, yPos + 15);
  
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  const grantCalc = [
    { label: 'Total Eligible Costs:', value: 'â‚¬' + Math.round(data.totalEligible).toLocaleString() },
    { label: 'Grant Rate:', value: '45%' },
    { label: 'Mini PIA Grant:', value: 'â‚¬' + Math.round(data.miniPiaGrant).toLocaleString(), bold: true },
    { label: 'Tax Credit (15%):', value: 'â‚¬' + Math.round(data.taxCredit).toLocaleString() },
    { label: 'Total Benefit:', value: 'â‚¬' + Math.round(data.miniPiaGrant + data.taxCredit).toLocaleString(), bold: true }
  ];
  
  let calcY = yPos + 30;
  grantCalc.forEach(item => {
    doc.setFont('helvetica', item.bold ? 'bold' : 'normal');
    doc.text(item.label, 35, calcY);
    doc.text(item.value, 165, calcY, { align: 'right' });
    calcY += 12;
  });
  
  yPos = 170;
  
  // Important Notes
  doc.setFillColor(...lightGray);
  doc.rect(20, yPos, 170, 80, 'F');
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(14);
  doc.setFont('helvetica', 'bold');
  doc.text('Important Information', 30, yPos + 15);
  
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  const notes = [
    'â€¢ Mini PIA grants are non-refundable (no repayment required)',
    'â€¢ Grants typically disbursed within 12-18 months of approval',
    'â€¢ Tax credits can be used over 5 years',
    'â€¢ Professional assistance recommended for application process',
    'â€¢ All amounts are estimates subject to final approval'
  ];
  
  let noteY = yPos + 25;
  notes.forEach(note => {
    doc.text(note, 30, noteY);
    noteY += 8;
  });
  
  // Page 5 - Next Steps
  doc.addPage();
  
  // Header
  doc.setFillColor(...primaryGreen);
  doc.rect(0, 0, 210, 30, 'F');
  doc.setTextColor(...white);
  doc.setFontSize(22);
  doc.setFont('helvetica', 'bold');
  doc.text('Next Steps & Contact', 105, 20, { align: 'center' });
  
  yPos = 50;
  
  doc.setTextColor(...darkBlue);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Your Investment Timeline', 25, yPos);
  
  yPos += 15;
  
  // Timeline
  const timeline = [
    { step: '1', title: 'Initial Consultation', desc: 'Review project details and grant eligibility' },
    { step: '2', title: 'Documentation', desc: 'Prepare all required documents and business plan' },
    { step: '3', title: 'Application Submission', desc: 'Submit complete Mini PIA application' },
    { step: '4', title: 'Approval Process', desc: 'Await evaluation (typically 3-6 months)' },
    { step: '5', title: 'Grant Disbursement', desc: 'Receive funds upon project milestones' }
  ];
  
  timeline.forEach((item, index) => {
    const stepY = yPos + (index * 25);
    
    // Circle
    doc.setFillColor(...primaryGreen);
    doc.circle(30, stepY, 8, 'F');
    doc.setTextColor(...white);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(item.step, 30, stepY + 1, { align: 'center' });
    
    // Text
    doc.setTextColor(...darkBlue);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(item.title, 45, stepY - 2);
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(item.desc, 45, stepY + 4);
  });
  
  yPos = 190;
  
  // Contact Box
  doc.setFillColor(...darkBlue);
  doc.rect(20, yPos, 170, 70, 'F');
  
  doc.setTextColor(...white);
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Ready to Start Your Investment?', 105, yPos + 15, { align: 'center' });
  
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text('Contact M&T International', 105, yPos + 30, { align: 'center' });
  
  doc.setFontSize(12);
  doc.text('ðŸ“§ info@marietrulli.com', 105, yPos + 42, { align: 'center' });
  doc.text('ðŸ“± +39 351 400 1402', 105, yPos + 52, { align: 'center' });
  
  // Footer on all pages
  const pageCount = doc.internal.getNumberOfPages();
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.text('Â© 2024 InvestiScopeâ„¢ - Professional Investment Analysis', 105, 290, { align: 'center' });
    doc.text('Page ' + i + ' of ' + pageCount, 190, 290, { align: 'right' });
  }
  
  return doc;
}

// Handle registration
window.handleRegistration = async function(event) {
  event.preventDefault();
  
  const name = document.getElementById('userName').value;
  const email = document.getElementById('userEmail').value;
  const phone = document.getElementById('userPhone').value;
  const location = document.getElementById('propertyLocation').value;
  const timeline = document.getElementById('investmentTimeline').value;
  
  try {
    // Save to Supabase if available (optional)
    if (supabase) {
      try {
        const { data: existingLead } = await supabase
          .from('leads')
          .select('id')
          .eq('email', email)
          .single();
        
        let leadId;
        
        if (!existingLead) {
          const { data: newLead } = await supabase
            .from('leads')
            .insert({
              email: email,
              name: name,
              phone: phone,
              source: 'investiscope_classic',
              property_location: location,
              investment_timeline: timeline
            })
            .select()
            .single();
          
          leadId = newLead.id;
        } else {
          leadId = existingLead.id;
          
          await supabase
            .from('leads')
            .update({ 
              name: name, 
              phone: phone,
              property_location: location,
              investment_timeline: timeline
            })
            .eq('id', leadId);
        }
        
        // Save analysis
        await supabase
          .from('analyses')
          .insert({
            lead_id: leadId,
            analysis_type: 'classic_integrated',
            property_value: calculationResults.propertyPurchase,
            renovation_budget: calculationResults.restructuring,
            grant_amount: calculationResults.miniPiaGrant,
            total_investment: calculationResults.totalProject,
            net_investment: calculationResults.netInvestment,
            analysis_data: calculationResults
          });
      } catch (dbError) {
        console.log('Database save failed, continuing with PDF generation:', dbError);
      }
    }
    
    // Skip email sending - go straight to PDF generation
    console.log('Generating PDF report...');
    
    // Check if jsPDF is available
    if (!window.jspdf || !window.jspdf.jsPDF) {
      console.error('jsPDF not loaded. Waiting for library...');
      // Try to load it dynamically
      await new Promise((resolve) => {
        const checkJsPDF = setInterval(() => {
          if (window.jspdf && window.jspdf.jsPDF) {
            clearInterval(checkJsPDF);
            resolve();
          }
        }, 100);
        // Timeout after 5 seconds
        setTimeout(() => {
          clearInterval(checkJsPDF);
          resolve();
        }, 5000);
      });
    }
    
    // Generate PDF
    const pdf = generatePDFReport({
      name: name,
      email: email,
      location: location,
      totalProject: calculationResults.totalProject,
      miniPiaGrant: calculationResults.miniPiaGrant,
      taxCredit: calculationResults.taxCredit,
      netInvestment: calculationResults.netInvestment,
      propertyPurchase: calculationResults.propertyPurchase,
      restructuring: calculationResults.restructuring,
      fixtures: calculationResults.fixtures,
      innovation: calculationResults.innovation,
      environmental: calculationResults.environmental,
      designPm: calculationResults.designPm,
      preliminaryStudies: calculationResults.preliminaryStudies,
      totalEligible: calculationResults.totalEligible,
      agencyFees: calculationResults.agencyFees,
      registrationTax: calculationResults.registrationTax,
      notaryFees: calculationResults.notaryFees,
      consultingFees: calculationResults.consultingFees,
      totalNonEligible: calculationResults.totalNonEligible,
      integratedPercent: calculationResults.integratedPercent,
      professionalCosts: calculationResults.professionalCosts || 0
    });

    // Download the PDF
    pdf.save('InvestiScope_Report_' + name.replace(/\s+/g, '_') + '_' + new Date().toISOString().split('T')[0] + '.pdf');

    // Close modal and show success
    closeModal();
    document.getElementById('reportForm').reset();
    showSuccessToast();
    
  } catch (error) {
    console.error('Error:', error);
    if (error.message && error.message.includes('PDF')) {
      alert('The PDF generator is still loading. Please try again in a few seconds.');
    } else {
      alert('There was an error generating your PDF report. Please check the console for details and try again.');
    }
  }
  
  return false;
}

// Send WhatsApp report
window.sendWhatsAppDirect = function() {
  if (!calculationResults.totalProject) {
    alert('Please wait for calculations to complete');
    return;
  }
  
  const message = 'ðŸ  INVESTISCOPEâ„¢ CLASSIC REPORT\n\n' +
    'ðŸ“Š PROJECT BREAKDOWN\n' +
    'Total Project: ' + formatCurrency(calculationResults.totalProject) + '\n' +
    'â€¢ Total Eligible: ' + formatCurrency(calculationResults.totalEligible) + '\n' +
    'â€¢ Total Non-Eligible: ' + formatCurrency(calculationResults.totalNonEligible) + '\n\n' +
    'ðŸ’° MINI PIA BENEFITS\n' +
    'Non-Refundable Grant: ' + formatCurrency(calculationResults.miniPiaGrant) + '\n' +
    'Tax Credit: ' + formatCurrency(calculationResults.taxCredit) + '\n' +
    'Total Benefit: ' + formatCurrency(calculationResults.totalBenefit) + '\n\n' +
    'ðŸ’µ YOUR INVESTMENT\n' +
    'Net Investment Required: ' + formatCurrency(calculationResults.netInvestment) + '\n' +
    '(After Mini PIA benefits)\n\n' +
    'ðŸ“‹ ELIGIBLE COSTS DETAIL\n' +
    'â€¢ Property Purchase: ' + formatCurrency(calculationResults.propertyPurchase) + '\n' +
    'â€¢ Renovations: ' + formatCurrency(calculationResults.restructuring) + '\n' +
    'â€¢ Fixtures & Fittings: ' + formatCurrency(calculationResults.fixtures) + '\n' +
    'â€¢ Innovation: ' + formatCurrency(calculationResults.innovation) + '\n' +
    'â€¢ Environmental: ' + formatCurrency(calculationResults.environmental) + '\n' +
    'â€¢ Design & PM: ' + formatCurrency(calculationResults.designPm) + '\n' +
    'â€¢ Studies: ' + formatCurrency(calculationResults.preliminaryStudies) + '\n\n' +
    'âŒ NON-ELIGIBLE COSTS\n' +
    'â€¢ Agency Fees: ' + formatCurrency(calculationResults.agencyFees) + '\n' +
    'â€¢ Registration Tax: ' + formatCurrency(calculationResults.registrationTax) + '\n' +
    'â€¢ Notary & Legal: ' + formatCurrency(calculationResults.notaryFees) + '\n' +
    'â€¢ Consulting: ' + formatCurrency(calculationResults.consultingFees) + '\n\n' +
    'ðŸ“ˆ KEY METRICS\n' +
    'â€¢ Grant Rate: 45% of eligible costs\n' +
    'â€¢ Tax Credit: 15% of eligible costs\n' +
    'â€¢ Integrated Components: ' + calculationResults.integratedPercent.toFixed(1) + '%\n' +
    'â€¢ Professional Costs: ' + formatCurrency(calculationResults.professionalCosts || 0) + '\n\n' +
    'ðŸ“ž NEXT STEPS:\n' +
    'Contact M&T International\n' +
    'ðŸ“§ info@marietrulli.com\n' +
    'ðŸ“± +39 351 400 1402\n\n' +
    'Generated by InvestiScopeâ„¢ Classic';
  
  window.open('https://wa.me/393514001402?text=' + encodeURIComponent(message), '_blank');
  
  closeModal();
  showSuccessToast();
}

// Show success toast
function showSuccessToast() {
  const toast = document.getElementById('successToast');
  toast.style.display = 'block';
  setTimeout(() => {
    toast.style.display = 'none';
  }, 5000);
}

// Close modal when clicking outside
document.getElementById('registrationOverlay').addEventListener('click', function(e) {
  if (e.target === this) {
    closeModal();
  }
});

// Prevent modal content from closing modal
document.querySelector('.modal-content').addEventListener('click', function(e) {
  e.stopPropagation();
});

